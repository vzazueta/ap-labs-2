o': i = va_arg(arg, unsigned int);
					//if(i == -2147483648) return -1;
					printf("%o", convert(i,8));
					break; 
						
			case 's': s = va_arg(arg, char *);
					//if(i == -2147483648) return -1;
					printf("%s", s); 
					break; 
						
			case 'x': i = va_arg(arg, unsigned int);
					//if(i == -2147483648) return -1; 
					printf("%x", convert(i,16));
					break; 
		}
      }
      
      va_end(arg);
	textcolor(RESET, WHITE, BLACK);	

	return 4;
}

int warnf(char *format, ...){
	char *traverse, *s;
      int i;
      va_list arg; 
	va_start(arg, format);
	textcolor(BRIGHT, YELLOW, BLACK);

	for(traverse = format; *traverse != '\0'; traverse++) { 
	      while(*traverse != '%') { 
	      	//printf("%c", *traverse);
			putchar(*traverse);
			traverse++; 
		} 
		
		traverse++; 

		switch(*traverse) { 
		      case 'c' : i = va_arg(arg, int);
				      putchar(i);
				      break; 
						
			case 'd' : i = va_arg(arg, int); 
					if(i<0) { 
				      	i = -i;
					      putchar('-');
					} 
					puts(convert(i, 10));
					break; 
						
			case 'o': i = va_arg(arg, unsigned int);
					printf("%o", convert(i,8));
					break; 
						
			case 's': s = va_arg(arg, char *);
					printf("%s", s); 
					break; 
						
			case 'x': i = va_arg(arg, unsigned int); 
					printf("%x", convert(i,16));
					break; 
	      }	
      }
      
      va_end(arg);
	textcolor(RESET, WHITE, BLACK);	


	return 5;
}

int errorf(char *format, ...){
	char *traverse, *s;
      int i;
      va_list arg; 
	va_start(arg, format);
	textcolor(BRIGHT, RED, BLACK);

	for(traverse = format; *traverse != '\0'; traverse++) { 
	      while(*traverse != '%') { 
	      	//printf("%c", *traverse);
			putchar(*traverse);
			traverse++; 
		} 
		
		traverse++; 

		switch(*traverse) { 
		      case 'c' : i = va_arg(arg, int);
				      putchar(i);
				      break; 
						
			case 'd' : i = va_arg(arg, int); 
					if(i<0) { 
				      	i = -i;
					      putchar('-');
					} 
					puts(convert(i, 10));
					break; 
						
			case 'o': i = va_arg(arg, unsigned int);
					printf("%o", convert(i,8));
					break; 
						
			case 's': s = va_arg(arg, char *);
					printf("%s", s); 
					break; 
						
			case 'x': i = va_arg(arg, unsigned int); 
					printf("%x", convert(i,16));
					break; 
	      }	
      }
      
      va_end(arg);
	textcolor(RESET, WHITE, BLACK);	


	return 6;
}

int panicf(char *format, ...){
	char *traverse, *s;
      int i;
      va_list arg; 
	va_start(arg, format);
	textcolor(BRIGHT, WHITE, RED);

	for(traverse = format; *traverse != '\0'; traverse++) { 
	      while(*traverse != '%') {
			putchar(*traverse);
			traverse++; 
		} 
		
		traverse++; 

		switch(*traverse) { 
		      case 'c' : i = va_arg(arg, int);
				      putchar(i);
				      break; 
						
			case 'd' : i = va_arg(arg, int); 
					if(i < 0) { 
				      	i = -i;
					      putchar('-');
					} 
					puts(convert(i, 10));
					break; 
						
			case 'o': i = va_arg(arg, unsigned int);
					printf("%o", convert(i,8));
					break; 
						
			case 's': s = va_arg(arg, char *);
					printf("%s", s); 
					break; 
						
			case 'x': i = va_arg(arg, unsigned int); 
					printf("%x", convert(i,16));
					break; 
	      }	
      }
      
      va_end(arg);
	textcolor(RESET, WHITE, BLACK);	


	return 666;
}
